package com.microservice.lcwd.gateway.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.web.server.SecurityWebFilterChain;
import org.springframework.security.web.server.authentication.RedirectServerAuthenticationFailureHandler;
import org.springframework.security.web.server.authentication.RedirectServerAuthenticationSuccessHandler;
import org.springframework.security.config.Customizer;


@Configuration
@EnableWebFluxSecurity
public class SecurityConfig{

	@Bean
	public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity httpSecurity) {
		

		httpSecurity
//		.authorizeExchange(exchanges -> exchanges
//				.pathMatchers("/actuator/**", "/health", "/public/**").permitAll() 
//                .pathMatchers("/auth/login").permitAll()  // Allow login endpoint
//                .anyExchange().authenticated()
//            )
////            .oauth2Login(Customizer.withDefaults())
//		.oauth2Login(oauth2Login -> oauth2Login
//                .authenticationSuccessHandler(new RedirectServerAuthenticationSuccessHandler("/auth/success"))
//                .authenticationFailureHandler(new RedirectServerAuthenticationFailureHandler("/auth/error"))
//            )
//            .oauth2Client(Customizer.withDefaults())
//            .oauth2ResourceServer(oauth2 -> oauth2
//                .jwt(Customizer.withDefaults())
//            )
//            .csrf(csrf -> csrf.disable())  // Important for API endpoints
//            .build();
	    .authorizeExchange(exchanges -> exchanges
	    		.pathMatchers("/actuator/**", "/health", "/public/**").permitAll()
    		.pathMatchers("/auth/login").permitAll() 
	        .anyExchange().authenticated()
	    )
	    .oauth2Login(Customizer.withDefaults())  // ðŸ‘ˆ REQUIRED for redirect login
	    .oauth2Client(Customizer.withDefaults()) // for enabling oauth2 client
	    .oauth2ResourceServer(oauth2 -> oauth2
	        .jwt(Customizer.withDefaults())
	    )
	    .csrf(csrf -> csrf.disable());
		


		
		return httpSecurity.build();
	}
}
