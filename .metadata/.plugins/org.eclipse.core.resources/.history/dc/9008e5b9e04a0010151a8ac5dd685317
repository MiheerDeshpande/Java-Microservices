server:
  port: 8081
  
  
spring:
  datasource:
    url: jdbc:sqlite:C:/Users/lenovlo/Documents/Laptop Backup/Cdac/workspaces/Databases/Java microservices/User Service/userservice.db
    driver-class-name: org.sqlite.JDBC
    username: ''
    password: ''
  jpa:
    properties:
      hibernate.dialect: org.hibernate.community.dialect.SQLiteDialect
    hibernate:
      ddl-auto: update
    show-sql: true
  application:
    name: USER-SERVICE
  config:
    import: configserver:http://localhost:8085
    
#oauth2 setup to receive calls
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: https://<your-idp-domain>/oauth2/default
          


#oauth 2 client setup for outgoing calls
      client:
        registration:
          my-internal-client:
            client-id: your-client-id
            client-secret: your-client-secret
            authorization-grant-type: client_credentials
            scope: openid
            provider: custom-okta
        provider:
          custom-okta:
            token-uri: https://<your-idp-domain>/oauth2/default/v1/token
    
#eureka:
#  instance:
#    prefer-ip-address: true
#  client:
#    fetch-registry: true
#    register-with-eureka: true
#    service-url:
#      defaultZone: http://localhost:8761/eureka/


management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health, info
  endpoint:
    health:
      show-details: always  
      

resilience4j:
  circuitbreaker:
    instances:
      ratingHotelBreaker:
        event-consumer-buffer-size: 10
        register-health-indicator: true
        failure-rate-threshold: 50
        minimum-number-of-calls: 5
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 
          seconds: 6
        permitted-number-of-calls-in-half-open-state: 3
        sliding-window-size: 10
        sliding-window-type: count-based
        
          
        
  retry:
    instances:
      ratingHotelService:
        max-attempts: 3
        wait-duration: 5s
        
  ratelimiter:
    instances:
      userRateLimiter:
        limit-refresh-period: 4s
        limit-for-period: 2
        timeout-duration: 4s
          
          
        
              
